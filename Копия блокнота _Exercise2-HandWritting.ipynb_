{"nbformat":4,"nbformat_minor":0,"metadata":{"coursera":{"course_slug":"introduction-tensorflow","graded_item_id":"d6dew","launcher_item_id":"FExZ4"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"},"colab":{"name":"Exercise2-HandWritting.ipynb","provenance":[{"file_id":"https://github.com/andrew-veriga/Tensorflow-labs/blob/master/Exercise2_HandWritting.ipynb","timestamp":1710959100287}]}},"cells":[{"cell_type":"markdown","metadata":{"id":"tOoyQ70H00_s"},"source":["## Упражнение 2\n","Напишите классификатор MNIST, который обучается до точности 99% или выше и делает это без фиксированного числа эпох - то есть вы должны прекратить обучение, как только достигнете этого уровня точности.\n","\n","1. Этого надо достигнуть менее чем за 10 эпох, поэтому можно установить epoches=10, но не более.\n","2. Когда точность станет 99% или больше, надо распечатать строку «Достигнута точность 99%, поэтому обучение закончено!»\n"]},{"cell_type":"code","metadata":{"id":"OmPpq7lZHw-2","executionInfo":{"status":"ok","timestamp":1710958819534,"user_tz":-240,"elapsed":4203,"user":{"displayName":"","userId":""}}},"source":["import tensorflow as tf\n","from os import path, getcwd, chdir\n","\n","mnist = tf.keras.datasets.mnist"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"9rvXQGAA0ssC","executionInfo":{"status":"ok","timestamp":1710959041316,"user_tz":-240,"elapsed":68616,"user":{"displayName":"","userId":""}},"outputId":"69ba70e7-2ac2-4eaa-f056-89a80ff6c00f","colab":{"base_uri":"https://localhost:8080/"}},"source":["# YOUR CODE SHOULD START HERE\n","# YOUR CODE SHOULD END HERE\n","\n","(x_train, y_train),(x_test, y_test) = mnist.load_data()\n","# YOUR CODE SHOULD START HERE\n","# Нормализация данных\n","x_train, x_test = x_train / 255.0, x_test / 255.0\n","\n","# Определение обратного вызова для остановки обучения при достижении точности 99%\n","class MyCallback(tf.keras.callbacks.Callback):\n","    def on_epoch_end(self, epoch, logs={}):\n","        if logs.get('accuracy') >= 0.99:\n","            print(\"\\nДостигнута точность 99%, поэтому обучение закончено!\")\n","            self.model.stop_training = True\n","# YOUR CODE SHOULD END HERE\n","model = tf.keras.models.Sequential([\n","# YOUR CODE SHOULD START HERE\n","    tf.keras.layers.Flatten(input_shape=(28, 28)),\n","    tf.keras.layers.Dense(512, activation=tf.nn.relu),\n","    tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n","# YOUR CODE SHOULD END HERE\n","])\n","\n","model.compile(optimizer='adam',\n","              loss='sparse_categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","# YOUR CODE SHOULD START HERE\n","# Создание экземпляра обратного вызова\n","callbacks = MyCallback()\n","\n","# Обучение модели\n","history = model.fit(x_train, y_train, epochs=10, callbacks=[callbacks])\n","\n","# Оценка модели на тестовых данных\n","test_loss, test_acc = model.evaluate(x_test, y_test)\n","\n","# YOUR CODE SHOULD END HERE\n","\n","print(history.epoch, history.history['accuracy'][-1])"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","1875/1875 [==============================] - 14s 7ms/step - loss: 0.2001 - accuracy: 0.9412\n","Epoch 2/10\n","1875/1875 [==============================] - 13s 7ms/step - loss: 0.0810 - accuracy: 0.9751\n","Epoch 3/10\n","1875/1875 [==============================] - 13s 7ms/step - loss: 0.0528 - accuracy: 0.9825\n","Epoch 4/10\n","1875/1875 [==============================] - 13s 7ms/step - loss: 0.0381 - accuracy: 0.9876\n","Epoch 5/10\n","1873/1875 [============================>.] - ETA: 0s - loss: 0.0273 - accuracy: 0.9913\n","Достигнута точность 99%, поэтому обучение закончено!\n","1875/1875 [==============================] - 13s 7ms/step - loss: 0.0273 - accuracy: 0.9913\n","313/313 [==============================] - 1s 3ms/step - loss: 0.0766 - accuracy: 0.9772\n","[0, 1, 2, 3, 4] 0.991266667842865\n"]}]}]}